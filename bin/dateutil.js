var util=require("util"),dateutil=module.exports={};dateutil.MONTHS_FULL_NAME="January February March April May June July August September October November December".split(" ");dateutil.MONTHS_SHORT_NAME="Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" ");dateutil.DAYS_FULL_NAME="Monday Tuesday Wednesday Thursday Friday Saturday Sunday".split(" ");dateutil.DAYS_SHORT_NAME="Mon Tue Wed Thu Fri Sat Sun".split(" ");
var DAYS_OF_MONTHS=[31,28,31,30,31,30,31,31,30,31,30,31],FEB_MONTH_LEAP_YEAR_DAYS=29,ZERO=0;dateutil.LAST_HOUR_IN_DAY=23;dateutil.LAST_MINUTE_IN_HOUR=59;dateutil.LAST_SECOND_IN_MINUTE=59;dateutil.LAST_MILLISECOND_IN_SECOND=999;dateutil.isDate=function(a){return"[object Date]"===Object.prototype.toString().call(a)?!0:!1};dateutil.isNotDate=function(a){return"[object Date]"===Object.prototype.toString().call(a)?!1:!0};dateutil.now=function(){return new Date};dateutil.getDays=function(){return DAYS};
dateutil.getShortDays=function(){return DAYS_SHORT_NAME};dateutil.getMonths=function(){return MONTHS};dateutil.getShortMonths=function(){return MONTHS_SHORT_NAME};function monthName(a){if(0>a||11<a)throw Error("The month number mush be grater then equal to 0 and lesser then equal to 11");return MONTHS[a]}dateutil.getMonthName=function(a){if(util.isNumber(a))return monthName(a);if(this.isDate(a))return monthName(a.getMonth());throw Error("Input must be number or date");};
function monthShortName(a){if(0>a||11<a)throw Error("The month number mush be grater then equal to 0 and lesser then equal to 11");return MONTHS_SHORT_NAME[a]}dateutil.getMonthShortName=function(a){if(util.isNumber(a))return monthShortName(a);if(this.isDate(a))return monthShortName(a.getMonth());throw Error("Input must be number or date");};
dateutil.isSameDay=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 mush be valid dates");return a.getDate()===b.getDate()&&a.getMonth()===b.getMonth()&&a.getYear()===b.getYear()};dateutil.equal=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 mush be valid dates");return a.getTime()===b.getTime()};function isLeap(a){return 0===a%4||0===a%100&&0===a%400?!0:!1}
dateutil.isLeapYear=function(a){if(util.isNumber(a))return isLeap(Math.abs(a));if(this.isDate(a))return isLeap(a.getFullYear());throw Error("The input must be valid number or date");};dateutil.resetTime=function(a){if(this.isNotDate(a))throw Error("The input must be valid date");a.setHours(ZERO,ZERO,ZERO,ZERO)};dateutil.resetTimetoMax=function(a){if(this.isNotDate(a))throw Error("The input must be valid date");a.setHours(LAST_HOUR_IN_DAY,LAST_MINUTE_IN_HOUR,LAST_SECOND_IN_MINUTE,LAST_MILLISECOND_IN_SECOND)};
function copy(a){return new Date(a.getTime())}dateutil.clone=function(a){if(this.isNotDate(a))throw Error("The date must be valid");return copy(a)};dateutil.startOfMonth=function(a){if(this.isNotDate(a))throw Error("The date must be valid");a=copy(a);a.setHours(ZERO,ZERO,ZERO,ZERO);a.setDate(1);return a};
dateutil.endOfMonth=function(a){if(this.isNotDate(a))throw Error("The date must be valid");var b=copy(a);1===a.getMonth()?b.setDate(isLeap(a.getFullYear())?FEB_MONTH_LEAP_YEAR_DAYS:DAYS_OF_MONTHS[a.getMonth()]):b.setDate(DAYS_OF_MONTHS[a.getMonth()]);b.setHours(LAST_HOUR_IN_DAY,LAST_MINUTE_IN_HOUR,LAST_SECOND_IN_MINUTE,LAST_MILLISECOND_IN_SECOND);return b};
dateutil.startOfYear=function(a){if(this.isNotDate(a))throw Error("The date must be valid");a=copy(a);a.setHours(ZERO,ZERO,ZERO,ZERO);a.setDate(1);a.setMonth(0);return a};dateutil.endOfYear=function(a){if(this.isNotDate(a))throw Error("The date must be valid");a=copy(a);a.setDate(31);a.setMonth(11);a.setHours(LAST_HOUR_IN_DAY,LAST_MINUTE_IN_HOUR,LAST_SECOND_IN_MINUTE,LAST_MILLISECOND_IN_SECOND);return a};
dateutil.addDays=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or days must be number");a.setDate(a.getDate()+Math.abs(b));return a};dateutil.subtractDays=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or days must be number");a.setDate(a.getDate()-Math.abs(b));return a};
dateutil.addMonths=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or months must be number");a.setMonth(a.getMonth()+Math.abs(b));return a};dateutil.subtractMonths=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or months must be number");a.setMonth(a.getMonth()-Math.abs(b));return a};
dateutil.addYears=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or years must be number");a.setFullYear(a.getFullYear()+Math.abs(b));return a};dateutil.subtractYears=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or years must be number");a.setFullYear(a.getFullYear()-Math.abs(b));return a};
dateutil.addHours=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or hours must be number");a.setHours(a.getHours()+Math.abs(b));return a};dateutil.subtractHours=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or hours must be number");a.setHours(a.getHours()-Math.abs(b));return a};
dateutil.addMinutes=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or minutes must be number");a.setMinutes(a.getMinutes()+Math.abs(b));return a};dateutil.subtractMinutes=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or minutes must be number");a.setMinutes(a.getMinutes()-Math.abs(b));return a};
dateutil.addSeconds=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or seconds must be number");a.setSeconds(a.getSeconds()+Math.abs(b));return a};dateutil.subtractSeconds=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or seconds must be number");a.setSeconds(a.getSeconds()-Math.abs(b));return a};
dateutil.addMilliSeconds=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or milliSeconds must be number");a.setMilliseconds(a.getMilliseconds()+Math.abs(b));return a};dateutil.subtractMilliSeconds=function(a,b){if(this.isNotDate(a)||!util.isNumber(b))throw Error("The date must be valid or milliSeconds must be number");a.setMilliseconds(a.getMilliseconds()-Math.abs(b));return a};
dateutil.between=function(a,b,c){if(this.isNotDate(a)||this.isNotDate(b)||this.isNotDate(c))throw Error("Inputs startDate, endDate and date must be valid dates");return a<=c&&c<=b};dateutil.betweenDay=function(a,b,c){return this.isDayGraterThanEqual(c,a)&&this.isDayLesserThanEqual(c,b)};
dateutil.isDayGrater=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 must be valid");return a.getFullYear()>b.getFullYear()||a.getFullYear()===b.getFullYear()&&a.getMonth()>b.getMonth()||a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()>b.getDate()?!0:!1};
dateutil.isDayGraterThanEqual=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 must be valid");return a.getFullYear()>b.getFullYear()||a.getFullYear()===b.getFullYear()&&a.getMonth()>b.getMonth()||a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()>=b.getDate()?!0:!1};
dateutil.isDayLesser=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 must be valid");return a.getFullYear()<b.getFullYear()||a.getFullYear()===b.getFullYear()&&a.getMonth()<b.getMonth()||a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()<b.getDate()?!0:!1};
dateutil.isDayLesserThanEqual=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 must be valid");return a.getFullYear()<b.getFullYear()||a.getFullYear()===b.getFullYear()&&a.getMonth()<b.getMonth()||a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()<=b.getDate()?!0:!1};dateutil.compare=function(a,b){if(this.isNotDate(a)||this.isNotDate(b))throw Error("The date1 and date2 must be valid");return a.getTime()-b.getTime()};
